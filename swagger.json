{
  "swagger": "2.0",
  "info": {
    "description": "BareFoot Nomad is application that Make company global travel and accommodation easy and convenient for the strong workforce of savvy members of staff, by leveraging the modern web.",
    "version": " ",
    "title": "BareFootNomad",
    "termsOfService": "https://github.com/Stackup-Rwanda/ateam-bn-backend/blob/develop/README.md",
    "contact": {
      "email": "the-a-team@gmail.com"
    }
  },
  "host": "ateam-bn-backend-staging.herokuapp.com",
  "basePath": "/api",
  "tags": [
    {
      "name": "User",
      "description": " User endpoints :: This endpoint will handle user wrong request"
    },
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    }
  ],
  "schemes": ["http", "https"],
  "consumes": ["application/json", "none"],
  "produces": ["application/json", "none"],
  "paths": {
    "/users/jkhgftgftydcrdc": {
      "get": {
        "tags": ["User"],
        "summary": "Access wrong link",
        "description": "Now by the use of this GET endpoint user Should be redirected to the documentation of application",
        "responses": {
          "400": {
            "description": " Bad request : Hey !! are you looking for BareFoot Nomad,  If yes Use the link below it is documentation of application"
          }
        }
      }
    },
    "/auth/signup/": {
      "post": {
        "tags": ["Auth"],
        "summary": "Signup with application",
        "description": "Now by the use of this POST endpoint user Should be able to create account with Barefoot Nomad application",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create user account: User credentials needed to be used for signup",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created successfully"
          },
          "400": {
            "description": "Invalid credentials"
          },
          "409": {
            "description": "This user already exists, use another email or username"
          }
        }
      }
    },
    "/auth/signin/": {
      "post": {
        "tags": ["Auth"],
        "summary": "Signin with application",
        "description": "Now by the use of this POST endpoint user Should be able to signin into his/her account with  Barefoot Nomad  application",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "signin into user account: Correct user credentials needed to be used for login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/signin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authorizeduser: successfully logged In"
          },
          "401": {
            "description": "Unauthorized: Please confirm your email before logging in! or Incorrect credentials"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["Auth"],
        "summary": "logout user from application",
        "description": "Now by the use of this GET endpoint user Should logout from application",
        "responses": {
          "200": {
            "description": " OK : Logout successfully"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "description": " This is user token which must be deleted directly when logged out from application",
            "type": "string"
          }
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Send Email to reset password",
        "description": "User can get an email to reset password, endpoint",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User email to be used for resetting password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendEmail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email has been sent successfully."
          },
          "400": {
            "description": "email must be a valid email"
          },
          "404": {
            "description": "Sorry! This email does not exist in Barefoot system."
          }
        }
      }
    },
    "/auth/update-password/{userId}/{token}": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Reset password",
        "description": "User can reset password, endpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "New password and confirmation password for a user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "type": "integer",
            "description": "parsing a user ID"
          },
          {
            "in": "path",
            "name": "token",
            "type": "string",
            "description": "parsing a user token"
          }
        ],
        "responses": {
          "200": {
            "description": "The password has been updated successfully."
          },
          "400": {
            "description": "password must be a valid email"
          },
          "401": {
            "description": "Sorry, the Token is invalide"
          },
          "404": {
            "description": "Sorry! The user does not exist."
          }
        }
      }
    },
    "/profile/{username}": {
      "get": {
        "description": "user can view his/her profile details",
        "summary": "View User's Profile",
        "tags": ["Profile"],
        "operationId": "ViewProfile",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "in": "path",
            "name": "username",
            "type": "string",
            "description": "parsing a username"
          }
        ],
        "responses": {
          "200": {
            "description": "profile details are provided",
            "headers": {}
          },
          "400": {
            "description": "token is malformed/invalid",
            "headers": {}
          },
          "401": {
            "description": "profile doesn't belong to user or user is not registered",
            "headers": {}
          }
        }
      },
      "patch": {
        "description": "User can update details of his/her profile",
        "summary": "Update User's Profile",
        "tags": ["Profile"],
        "operationId": "UpdateProfile",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "in": "path",
            "name": "username",
            "type": "string",
            "description": "parsing a username"
          },
          {
            "in": "formData",
            "name": "image",
            "type": "file",
            "description": "profile photo"
          },
          {
            "in": "formData",
            "name": "cover",
            "type": "file",
            "description": "cover photo"
          },
          {
            "in": "formData",
            "required": true,
            "name": "name",
            "type": "string",
            "description": "name"
          },
          {
            "in": "formData",
            "required": true,
            "name": "birthdate",
            "type": "string"
          },
          {
            "in": "formData",
            "required": true,
            "name": "gender",
            "type": "string"
          },
          {
            "in": "formData",
            "required": true,
            "name": "preferredLanguage",
            "type": "string"
          },
          {
            "in": "formData",
            "required": true,
            "name": "preferredCurrency",
            "type": "string"
          },
          {
            "in": "formData",
            "required": true,
            "name": "location",
            "type": "string"
          },
          {
            "in": "formData",
            "required": true,
            "name": "location",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "profile is updated successfuly",
            "headers": {}
          },
          "400": {
            "description": "token is malformed/invalid",
            "headers": {}
          },
          "401": {
            "description": "profile doesn't belong to user or user is not registered",
            "headers": {}
          }
        }
      }
    },
    "/search/request": {
      "post": {
        "description": "A user can search his trip request and approval based on request id , request owner, destination, origin and request status ",
        "summary": "search",
        "tags": ["Search"],
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "user token"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "data of a user, that will be searched",
            "schema": {
              "$ref": "#/definitions/searchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "requested data"
          },
          "400": {
            "description": "token is malformed/invalid "
          },
          "401": {
            "description": "the user is not logged in"
          },
          "404": {
            "description": "request with given input is not available"
          }
        }
      }
    },
    "/users/{username}/role": {
      "patch": {
        "description": "A super administrator can assign roles to users by using their email addresses",
        "summary": "Update a User's role",
        "tags": ["Role"],
        "operationId": "UpdateRole",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "in": "path",
            "name": "username",
            "type": "string",
            "description": "username of a user whose role is about to be updated"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "Super administrator is able to change roles of a particular user",
            "schema": {
              "$ref": "#/definitions/roleUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "role is updated successfuly",
            "headers": {}
          },
          "400": {
            "description": "token is malformed/invalid or role field is not valid",
            "headers": {}
          },
          "401": {
            "description": "the requester is not logged in, doesn't have an account or doesn't have Super Administrator privileges",
            "headers": {}
          },
          "404": {
            "description": "user with the provided username doesn't exist",
            "headers": {}
          }
        }
      }
    },
    "/search/request/manager": {
      "post": {
        "description": "A manager can search his trip request and approval based on request id , request owner, destination, origin and request status ",
        "summary": "search",
        "tags": ["Search"],
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "user token"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "data of a users, that will be searched",
            "schema": {
              "$ref": "#/definitions/searchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "requested data"
          },
          "400": {
            "description": "token is malformed/invalid "
          },
          "401": {
            "description": "the user is not logged in"
          },
          "404": {
            "description": "request with given input is not available"
          }
        }
      }
    },
    "/request/{id}/approve": {
      "patch": {
        "tags": ["Approve Trip Request"],
        "summary": "Manager can approve a trip request",
        "description": "Manager can approve trip request done by users under his/her authority",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Approve a request: update the status of the trip",
            "required": true,
            "schema": {
              "$ref": "#/definitions/approvalRequest"
            }
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "parsing a trip id"
          }
        ],
        "responses": {
          "200": {
            "description": "This trip request was successfully approved"
          },
          "400": {
            "description": "Please provide a authentic request"
          },
          "401": {
            "description": "Please provide a token first"
          },
          "403": {
            "description": "You are not authorized to approve this request"
          }
        }
      }
    },
    "/request/{id}/reject": {
      "patch": {
        "tags": ["Reject Trip Request"],
        "summary": "Manager can reject a trip request",
        "description": "Manager can reject trip request done by users under his/her authority",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Reject a request: update the status of the trip",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rejectRequest"
            }
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "parsing a trip id"
          }
        ],
        "responses": {
          "200": {
            "description": "This trip request was successfully approved"
          },
          "400": {
            "description": "Please provide a authentic request"
          },
          "401": {
            "description": "Please provide a token first"
          },
          "403": {
            "description": "You are not authorized to approve this request"
          }
        }
      }
    },
    "/trips": {
      "post": {
        "tags": ["Trip"],
        "summary": "Trip creation",
        "description": "User can create a trip (One Way Trip, Return Trip and choose Multiple City on a trip)",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "token identify that a user has signed in"
          },
          {
            "in": "body",
            "name": "body",
            "description": "data needed to create a trip",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TripCreation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Trip was created successfully."
          },
          "422": {
            "description": "bad data"
          },
          "409": {
            "description": "This trip already exists, use another reasons or date."
          }
        }
      },
      "get": {
        "tags": [
          "Trip"
        ],
        "summary": "Viewing all trips",
        "description": "a Requester user views all trip requests they've created, a Manager user views all trip requests",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "token identify that a user has signed in"
          }
        ],
        "responses": {
          "200": {
            "description": "trip requests successfuly retrieved"
          },
          "400": {
            "description": "Malformed/ Incorrect security token ! Check token and try again."
          },
          "401": {
            "description": "User not recognised. Please create account and try again./ Already logged out. Sign in and try again."
          }
        }
      }
    },
    "/trips/{id}": {
      "put": {
        "tags": ["Trip"],
        "summary": "Trip creation",
        "description": "User can update a trip request if it is still open/Pending",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "token identify that a user has signed in"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "id of the trip request"
          },
          {
            "in": "body",
            "name": "body",
            "description": "data needed to create a trip",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TripCreation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Trip was created successfully."
          },
          "422": {
            "description": "bad data"
          },
          "409": {
            "description": "This trip already exists, use another reasons or date."
          }
        }
      },
       "get": {
        "description": "A user should be able to see a single trip request that belongs to them",
        "summary": "View single trip request ",
        "tags": [
          "Trips"
        ],
        "operationId": "viewSingleTripRequest",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "security token"
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "parsing a trip id"
          }
        ],
        "responses": {
          "200": {
            "description": "Single trip retrieved successfully",
            "headers": {}
          },
          "404": {
            "description": "Notifications not found",
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "headers": {}
          }
        }
    }
    },
    "/trips/{tripId}/comment": {
      "post": {
        "tags": ["Trip Comment"],
        "summary": "create a trip comment",
        "description": "User can create a trip comment, endpoint",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "data to pass in body, to create a comment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createComment"
            }
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "token identify that a user has signed in"
          },
          {
            "in": "path",
            "name": "tripId",
            "type": "integer",
            "required": true,
            "description": "parsing a Trip ID"
          }
        ],
        "responses": {
          "201": {
            "description": "Comment has been created successfully"
          },
          "400": {
            "description": "comment is required / Sorry, The request contains bad data"
          },
          "403": {
            "description": "Sorry, You are not allowed to comment on This trip."
          },
          "404": {
            "description": "Sorry, This trip does not exist."
          }
        }
      }
    },
    "/comments/{commentId}/update": {
      "patch": {
        "tags": ["Trip Comment"],
        "summary": "update a trip comment",
        "description": "User can update a trip comment, endpoint",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "data to pass in body, to update a comment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateComment"
            }
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "token identify that a user has signed in"
          },
          {
            "in": "path",
            "name": "commentId",
            "type": "integer",
            "required": true,
            "description": "parsing a Comment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment has been updated successfully."
          },
          "400": {
            "description": "comment is required / Sorry, The request contains bad data"
          },
          "404": {
            "description": "Sorry, The comment not found."
          }
        }
      }
    },
    "/trips/{tripId}/comments": {
      "get": {
        "tags": ["Trip Comment"],
        "summary": "get commets",
        "description": "User may get all comments, endpoint",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "token identify that a user has signed in"
          },
          {
            "in": "path",
            "name": "tripId",
            "type": "integer",
            "required": true,
            "description": "parsing a Trip ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Trip comments has been found successfully"
          },
          "400": {
            "description": "Sorry, the request contains bad data"
          },
          "403": {
            "description": "Sorry, You are not allowed to see the comments of This trip."
          },
          "404": {
            "description": "Sorry, This trip does not exist. / Sorry, This trip does not have any comment."
          }
        }
      }
    },
    "/comments/{commentId}/delete": {
      "delete": {
        "tags": ["Trip Comment"],
        "summary": "delete commet",
        "description": "User can delete a comment, endpoint",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "token identify that a user has signed in"
          },
          {
            "in": "path",
            "name": "commentId",
            "type": "integer",
            "required": true,
            "description": "parsing a Comment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment has been deleted successfully."
          },
          "400": {
            "description": "Sorry, the request contains bad data"
          },
          "404": {
            "description": "Sorry, The comment not found."
          }
        }
      }
    },
    "/profile/rememberMe/:state": {
      "post": {
        "description": "A user should be able to set their profile info to be remembered or not on their next travel request",
        "summary": "remember a use's profile",
        "tags": ["Remember profile"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": ""
          },
          {
            "in": "path",
            "name": "state",
            "type": "string",
            "description": "remember or not value"
          }
        ],
        "responses": {
          "201": {
            "description": "your profile will be remembered on your next request initiation"
          },
          "404": {
            "description": "cannot remember profle without data"
          },
          "401": {
            "description": "Already logged out. Sign in and try again. / User not recognised. Please create account and try again."
          },
          "400": {
            "description": "Wrong parameter, please provide true or false as parameters. / Malformed/ Incorrect security token ! Check token and try again."
          }
        }
      }
    },
    "/accommodation": {
      "post": {
        "description": "Travel Admin can create an accommodation",
        "summary": "Create new Accommodation",
        "tags": ["Accommodation"],
        "operationId": "CreateAccommodation",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "security token"
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "description": "the name of the accommodation"
          },
          {
            "in": "formData",
            "name": "description",
            "type": "string",
            "description": "the description of the accommodation"
          },
          {
            "in": "formData",
            "name": "image",
            "type": "file",
            "description": "upload a picture"
          },
          {
            "in": "formData",
            "name": "locationId",
            "type": "string",
            "description": "the location of the accommodation"
          },
          {
            "in": "formData",
            "name": "geoLocation",
            "type": "string",
            "description": "the geoLocation of the accommodation"
          },
          {
            "in": "formData",
            "name": "space",
            "type": "string",
            "description": "the space available in the accommodation"
          },
          {
            "in": "formData",
            "name": "cost",
            "type": "string",
            "description": "the cost of the accommodation"
          },
          {
            "in": "formData",
            "name": "highlights",
            "type": "string",
            "description": "the highlights that happened"
          },
          {
            "in": "formData",
            "name": "amenities",
            "type": "string",
            "description": "provide the amenities the accommodation provides"
          }
        ],
        "responses": {
          "201": {
            "description": "Accommodation Successfully Supplied",
            "headers": {}
          },
          "400": {
            "description": "Please select one or more pictures / token is malformed/invalid",
            "headers": {}
          },
          "415": {
            "description": "Please select the right type of image",
            "headers": {}
          },
          "401": {
            "description": "You are not allowed to create an accommodation",
            "headers": {}
          }
        }
      }
    },
    "/accomodation/react/:accommodationId": {
      "post": {
        "tags": ["Accommodation"],
        "summary": "user react on accommodation",
        "description": "User can like or unlike an accommodation",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "token identify that a user has signed in"
          },
          {
            "in": "path",
            "name": "accommodationId",
            "type": "integer",
            "required": true,
            "description": "parsing an accommodation Id"
          },
          {
            "in": "body",
            "name": "body",
            "description": "data to pass in body, to create a reaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accomodationReaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "reaction recorded successflly / reaction deleted"
          },
          "400": {
            "description": "reactionType must be one of like,fire or hate"
          },
          "401": {
            "description": "Already logged out. Sign in and try again."
          }
        }
      }
    },
    "/accommodation/feedback/:accommodationId": {
      "post": {
        "tags": ["Accommodation"],
        "summary": "user give feedback on accommodation",
        "description": "User can give feedback on an accommodation",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "token identify that a user has signed in"
          },
          {
            "in": "path",
            "name": "accommodationId",
            "type": "integer",
            "required": true,
            "description": "parsing an accommodation Id"
          },
          {
            "in": "body",
            "name": "body",
            "description": "data to pass in body, to create a feedback",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accomodationFeedback"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Your feedback was saved successfully"
          },
          "400": {
            "description": "you cannot give feedback to an accommodation you have not been to"
          },
          "401": {
            "description": "Already logged out. Sign in and try again."
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "description": "User can view all their notifications assigned to them",
        "summary": "Viewing all Notifications",
        "tags": ["Notification"],
        "operationId": "ViewNotification",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "security token"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists of all notifications",
            "content": {},
            "headers": {}
          },
          "404": {
            "description": "You dont have any notifications",
            "headers": {}
          }
        }
      }
    },
    "/notifications/mark": {
      "post": {
        "description": "A user should be able to mark all notifications as read or unread",
        "summary": " Mark notifications",
        "tags": ["Notification"],
        "operationId": "markNotifications",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "security token"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "User is able to mark all notifications as read or unread",
            "schema": {
              "$ref": "#/definitions/markOne"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications marked as read / Notifications marked as unread",
            "headers": {}
          },
          "404": {
            "description": "Notifications not found",
            "headers": {}
          }
        }
      }
    },
    "/notifications/{id}/mark": {
      "post": {
        "description": "A user should be able to mark a notification as read or unread",
        "summary": " Mark notification",
        "tags": ["Notification"],
        "operationId": "markNotification",
        "deprecated": false,
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "security token"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "parsing a notification id"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "User is able to mark a notification as read or unread",
            "schema": {
              "$ref": "#/definitions/markOne"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read / Notification marked as unread",
            "headers": {}
          },
          "404": {
            "description": "Notification not found",
            "headers": {}
          }
        }
      }
    },
    "/location/most-travelled-destination": {
      "get": {
        "tags": ["Most Travelled Destination"],
        "summary": "users can view most travelled destination",
        "description": "Users can view most travelled destination with extra information to help being clarity",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "users must parsing his/her token to get authenticate to view destination"
          }
        ],
        "responses": {
          "200": {
            "description": "`Hey username !! This is the most travelled destination ever`"
          },
          "404": {
            "description": "`Hey username No centre travelled yet !!`"
          }
        }
      }
    },
    "/ratings/{id}": {
      "patch": {
        "tags": ["Rate an accommodation"],
        "summary": "User can rate an accommodation",
        "description": "User can rate an accommodation according to the hospitality obtained from there",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "to rate an accommodation, the user send stars varying from 1 to 5 stars",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rateAccommodation"
            }
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "parsing a accommodation id"
          }
        ],
        "responses": {
          "200": {
            "description": "You have successfully rated the accommodation, the rate is decimal now"
          },
          "400": {
            "description": "Please provide a authentic accomodation"
          },
          "401": {
            "description": "Please provide a token first"
          }
        }
      }
    },
    "/auth/admin/signup": {
      "post": {
        "tags": ["Super Admin register a user"],
        "summary": "Super Administrator can register a user with a specific role",
        "description": "Super Administrator is able to create a certain user with a specific role and if the user is a requester he/she must be assigned a manager",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Super admin can create a user with any role",
            "required": true,
            "schema": {
              "$ref": "#/definitions/superAdminSignUp"
            }
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Super admin's token"
          }
        ],
        "responses": {
          "201": {
            "description": "User was created successfully, Verify your email to confirm registration"
          },
          "400": {
            "description": "Malformed/ Incorrect security token ! Check token and try again."
          },
          "401": {
            "description": "User not recognised. Please create account and try again."
          },
          "409": {
            "description": "This user already exists, use another email or username"
          }
        }
      }
    }
  },
  "definitions": {
    "Signup": {
      "type": "object",
      "required": [
        "name",
        "gender",
        "passportId",
        "email",
        "username",
        "password",
        "birthdate",
        "preferredLanguage",
        "referredCurrency",
        "locationId",
        "department"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "passportId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "birthdate": {
          "type": "date"
        },
        "preferredLanguage": {
          "type": "string"
        },
        "preferredCurrency": {
          "type": "string"
        },
        "locationId": {
          "type": "integer"
        },
        "department": {
          "type": "string"
        }
      }
    },
    "signin": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "SendEmail": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "ResetPassword": {
      "type": "object",
      "required": ["password", "confirmPassword"],
      "properties": {
        "password": {
          "type": "string"
        },
        "confirmPassword": {
          "type": "string"
        }
      }
    },
    "profileUpdate": {
      "title": "Profile Update Request",
      "example": {
        "name": "edited username",
        "birthdate": "2000-02-02",
        "gender": "male",
        "preferredLanguage": "English",
        "preferredCurrency": "USD",
        "location": "Kigali Rwanda"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "birthdate": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "preferredLanguage": {
          "type": "string"
        },
        "preferredCurrency": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "birthdate",
        "gender",
        "preferredLanguage",
        "preferredCurrency",
        "location"
      ]
    },
    "roleUpdate": {
      "title": "User role update request",
      "example": {
        "role": "Travel Administrator"
      },
      "type": "object",
      "properties": {
        "role": {
          "type": "string"
        }
      },
      "required": ["role"]
    },
    "searchRequest": {
      "type": "object",
      "required": ["search"],
      "properties": {
        "search": {
          "type": "string"
        }
      }
    },
    "approvalRequest": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "rejectRequest": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "TripCreation": {
      "title": "create a trip",
      "example": {
        "name": "Jay Lenno",
        "passportId": "PC123487",
        "tripType": "One-way",
        "from": 1,
        "to": [2, 1],
        "date": "2050-09-13",
        "returnDate": "2050-10-30",
        "reasons": "hound issues",
        "accommodationId": 2
      },
      "type": "object",
      "required": ["tripType", "from", "to", "date", "reasons", "accommodationId"],
      "properties": {
        "tripType": {
          "type": "string"
        },
        "from": {
          "type": "integer"
        },
        "to": {
          "type": "integer"
        },
        "date": {
          "type": "date"
        },
        "reasons": {
          "type": "string"
        },
        "returnDate": {
          "type": "date"
        },
        "accommodationId": {
          "type": "integer"
        }
      }
    },
    "createComment": {
      "type": "object",
      "required": ["comment"],
      "properties": {
        "comment": {
          "type": "string"
        }
      }
    },
    "updateComment": {
      "type": "object",
      "required": ["comment"],
      "properties": {
        "comment": {
          "type": "string"
        }
      }
    },
    "markOne": {
      "title": "User must be able to mark all notifications as read or unread",
      "example": {
        "viewed": "read"
      },
      "type": "object",
      "properties": {
        "viewed": {
          "type": "string"
        }
      },
      "required": ["viewed"]
    },
    "rateAccommodation": {
      "type": "object",
      "required": ["stars"],
      "properties": {
        "stars": {
          "type": "integer"
        }
      }
    },
    "like/unlike accommodation": {
      "type": "object",
      "required": ["reactionType"],
      "properties": {
        "liked": {
          "type": "string"
        }
      }
    },
    "give feedback on accommodation": {
      "type": "object",
      "required": ["feedback"],
      "properties": {
        "feedback": {
          "type": "string"
        }
      }
    },
    "superAdminSignUp": {
      "type": "object",
      "required": [
        "name",
        "gender",
        "passportId",
        "email",
        "username",
        "password",
        "birthdate",
        "preferredLanguage",
        "referredCurrency",
        "locationId",
        "role",
        "department",
        "lineManager"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "passportId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "birthdate": {
          "type": "date"
        },
        "preferredLanguage": {
          "type": "string"
        },
        "preferredCurrency": {
          "type": "string"
        },
        "locationId": {
          "type": "integer"
        },
        "role": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "lineManager": {
          "type": "integer"
        }
      }
    }
  }
}
